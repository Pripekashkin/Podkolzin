/******************************************************************************/
/***        Generated by IBExpert 2014.6.28.1 5/21/2020 10:02:34 AM         ***/
/******************************************************************************/

SET SQL DIALECT 3;

SET NAMES WIN1251;

CREATE DATABASE 'localhost:D:\delphi\new_project\DB.fdb'
USER 'SYSDBA' PASSWORD 'masterkey'
PAGE_SIZE 16384
DEFAULT CHARACTER SET WIN1251 COLLATION WIN1251;



/******************************************************************************/
/***                               Generators                               ***/
/******************************************************************************/

CREATE GENERATOR GEN_DEPART_ID;
SET GENERATOR GEN_DEPART_ID TO 0;

CREATE GENERATOR GEN_LINE_ITEM_ID;
SET GENERATOR GEN_LINE_ITEM_ID TO 0;

CREATE GENERATOR GEN_REPORT_CONTENT_ID;
SET GENERATOR GEN_REPORT_CONTENT_ID TO 0;

CREATE GENERATOR GEN_REPORT_ID;
SET GENERATOR GEN_REPORT_ID TO 0;

CREATE GENERATOR GEN_YEAR_PLAN_ID;
SET GENERATOR GEN_YEAR_PLAN_ID TO 0;



SET TERM ^ ; 



/******************************************************************************/
/***                           Stored Procedures                            ***/
/******************************************************************************/

CREATE PROCEDURE PROC_DEPART (
    DEP_ID INTEGER,
    DEP_NAME VARCHAR(30))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE PROC_LINE (
    PROC_ID INTEGER,
    PROC_INFO VARCHAR(30))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE PROC_REPORT (
    REPORT_ID_VAR INTEGER,
    REPORT_RYEAR INTEGER,
    REPORT_RMONTH INTEGER,
    REPORT_DEPART_ID INTEGER,
    CONTENT_LINE_ITEM INTEGER,
    CONTENT_INFO VARCHAR(30),
    CONTENT_SUM DECIMAL(15,2))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE PROC_YEAR (
    PROC_ID INTEGER,
    PROC_DEPART_ID INTEGER,
    PROC_LINE_ITEM INTEGER,
    PROC_PYEAR INTEGER,
    PROC_PSUM INTEGER)
AS
BEGIN
  EXIT;
END^






SET TERM ; ^



/******************************************************************************/
/***                                 Tables                                 ***/
/******************************************************************************/



CREATE TABLE DEPART (
    ID    INTEGER NOT NULL,
    NAME  VARCHAR(30)
);

CREATE TABLE LINE_ITEM (
    ID    INTEGER NOT NULL,
    INFO  VARCHAR(30)
);

CREATE TABLE REPORT (
    ID         INTEGER NOT NULL,
    RYEAR      INTEGER,
    RMONTH     INTEGER,
    DEPART_ID  INTEGER
);

CREATE TABLE REPORT_CONTENT (
    ID            INTEGER NOT NULL,
    REPORT_ID     INTEGER,
    LINE_ITEM_ID  INTEGER,
    INFO          VARCHAR(30),
    REPORT_SUM    DECIMAL(15,2)
);

CREATE TABLE TEST (
    ID  INTEGER NOT NULL
);

CREATE TABLE YEAR_PLAN (
    ID            INTEGER NOT NULL,
    DEPART_ID     INTEGER,
    LINE_ITEM_ID  INTEGER,
    PYEAR         INTEGER,
    PSUM          DECIMAL(15,2)
);



/******************************************************************************/
/***                              Primary Keys                              ***/
/******************************************************************************/

ALTER TABLE DEPART ADD CONSTRAINT PK_DEPART PRIMARY KEY (ID);
ALTER TABLE LINE_ITEM ADD CONSTRAINT PK_LINE_ITEM PRIMARY KEY (ID);
ALTER TABLE REPORT ADD CONSTRAINT PK_REPORT PRIMARY KEY (ID);
ALTER TABLE REPORT_CONTENT ADD CONSTRAINT PK_REPORT_CONTENT PRIMARY KEY (ID);
ALTER TABLE TEST ADD CONSTRAINT PK_TEST PRIMARY KEY (ID);
ALTER TABLE YEAR_PLAN ADD CONSTRAINT PK_YEAR_PLAN PRIMARY KEY (ID);


/******************************************************************************/
/***                              Foreign Keys                              ***/
/******************************************************************************/

ALTER TABLE REPORT ADD CONSTRAINT FK_REPORT_1 FOREIGN KEY (DEPART_ID) REFERENCES DEPART (ID);
ALTER TABLE REPORT_CONTENT ADD CONSTRAINT FK_REPORT_CONTENT_1 FOREIGN KEY (REPORT_ID) REFERENCES REPORT (ID);
ALTER TABLE REPORT_CONTENT ADD CONSTRAINT FK_REPORT_CONTENT_2 FOREIGN KEY (LINE_ITEM_ID) REFERENCES LINE_ITEM (ID);
ALTER TABLE YEAR_PLAN ADD CONSTRAINT FK_YEAR_PLAN_1 FOREIGN KEY (DEPART_ID) REFERENCES DEPART (ID);
ALTER TABLE YEAR_PLAN ADD CONSTRAINT FK_YEAR_PLAN_2 FOREIGN KEY (LINE_ITEM_ID) REFERENCES LINE_ITEM (ID);


/******************************************************************************/
/***                                Triggers                                ***/
/******************************************************************************/


SET TERM ^ ;



/******************************************************************************/
/***                          Triggers for tables                           ***/
/******************************************************************************/



/* Trigger: DEPART_BI */
CREATE TRIGGER DEPART_BI FOR DEPART
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_depart_id,1);
end
^

/* Trigger: LINE_ITEM_BI */
CREATE TRIGGER LINE_ITEM_BI FOR LINE_ITEM
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_line_item_id,1);
end
^

/* Trigger: REPORT_BI */
CREATE TRIGGER REPORT_BI FOR REPORT
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_report_id,1);
end
^

/* Trigger: REPORT_CONTENT_BI */
CREATE TRIGGER REPORT_CONTENT_BI FOR REPORT_CONTENT
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_report_content_id,1);
end
^

/* Trigger: YEAR_PLAN_BI */
CREATE TRIGGER YEAR_PLAN_BI FOR YEAR_PLAN
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_year_plan_id,1);
end
^

SET TERM ; ^



/******************************************************************************/
/***                           Stored Procedures                            ***/
/******************************************************************************/


SET TERM ^ ;

ALTER PROCEDURE PROC_DEPART (
    DEP_ID INTEGER,
    DEP_NAME VARCHAR(30))
AS
begin
  if (:dep_id < 0) then
  begin 
    insert into depart(name)
    values (:dep_name);
  end
  else
  begin 
    update
        depart
    set
        name = :dep_name
    where
        id = :dep_id;
  end
end^


ALTER PROCEDURE PROC_LINE (
    PROC_ID INTEGER,
    PROC_INFO VARCHAR(30))
AS
begin
    begin
  if (:proc_id < 0) then
  begin 
    insert into line_item(info)
    values (:proc_info);
  end
  else
  begin 
    update
        line_item
    set
        info = :proc_info
    where
        id = :proc_id;
  end
end
end^


ALTER PROCEDURE PROC_REPORT (
    REPORT_ID_VAR INTEGER,
    REPORT_RYEAR INTEGER,
    REPORT_RMONTH INTEGER,
    REPORT_DEPART_ID INTEGER,
    CONTENT_LINE_ITEM INTEGER,
    CONTENT_INFO VARCHAR(30),
    CONTENT_SUM DECIMAL(15,2))
AS
begin
    if (:report_id_var < 0) then
    begin
       insert into report(ryear, rmonth, depart_id)
       values (:report_ryear, :report_rmonth, :report_depart_id);

       insert into report_content(report_id, line_item_id, info, report_sum)
       values (gen_id(gen_report_id,0), :content_line_item, :content_info, :content_sum);
    end
       else
       begin
            update report
       set
            ryear = :report_ryear,
            rmonth = :report_rmonth,
            depart_id = :report_depart_id
       where
            id = :report_id_var;
            -----
            update report_content
       set
            report_id = :report_id_var,
            line_item_id = :content_line_item,
            info = :content_info,
            report_sum = :content_sum
       where
            id = :report_id_var;

        end
end^


ALTER PROCEDURE PROC_YEAR (
    PROC_ID INTEGER,
    PROC_DEPART_ID INTEGER,
    PROC_LINE_ITEM INTEGER,
    PROC_PYEAR INTEGER,
    PROC_PSUM INTEGER)
AS
begin
      if (:proc_id < 0) then
  begin 
    insert into year_plan(depart_id, line_item_id, pyear, psum)
    values (:proc_depart_id, :proc_line_item, :proc_pyear, :proc_psum);
  end
  else
  begin 
    update
        year_plan
    set
        depart_id = :proc_depart_id,
        line_item_id = :proc_line_item,
        pyear = :proc_pyear,
        psum = :proc_psum
    where
        id = :proc_id;
end
end^



SET TERM ; ^
